package com.dbmansfield.book

import com.xenomachina.argparser.ArgParser
import com.xenomachina.argparser.ShowHelpException
import org.freedesktop.dbus.DBusConnection
import org.freedesktop.dbus.exceptions.DBusException
import java.lang.Thread.sleep
import kotlin.system.exitProcess

// The help formatter is ugly and includes options we don't want to list, like
// --gapplication-service. This was generated by the ruby gem slop, which looks
// much nicer I think.
val help = """Usage: bookmanager [OPTION]... [COMMAND] [ARGS]...
Manage a library of digital books and papers.

    -h, --help     display this help and exit
    -l, --library  name of the library
"""

fun main(vararg args: String) {
    val parsedArgs = Args(ArgParser(args))
    try {
        if (parsedArgs.service) {
            runService()
            return
        }
    } catch(e: ShowHelpException) {
        println(help)
        return
    }
}

// Export a DBus object to provide a SearchProvider interface that Gnome-Shell
// can interface to allow desktop searching of books
fun runService() {
    val bus: DBusConnection = try {
        DBusConnection.getConnection(DBusConnection.SESSION)
    } catch(e: DBusException) {
        print("Could not connect to bus: $e")
        exitProcess(1)
    }
    bus.requestBusName("com.dbmansfield.book.SearchProvider")
    bus.exportObject("/com/dbmansfield/book/SearchProvider", SearchProvider())
    // Want to wait on the thread the exported object is running on, but we
    // can't get access to it so we just sleep a bit instead.
    sleep(10000)
    bus.disconnect()
}